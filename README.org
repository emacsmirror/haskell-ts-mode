
* Context

A haskell mode that uses treesitter.

The package is still in devlopment, please report bugs or email
them(email found it main .el file).

* Screenshot
[[ss.png]]

* Features
The basic features are:
- Syntax highliting
- Indentation
- Imenu support
- REPL
- Prettify symbols mode support

The more interesting features are:
- Logical syntax highlighting:
  - Only arguments that can be used in functions are highlighted, eg
    in `f (_:(a:[])) only 'a' is highlighted
  - The return type of a function is optionally highlighted, if
    treesit-font-lock-level is set to 4
  - All new variabels are(or should be) highlighted, this includes
    generators, lambda args.
  - highlighting the '=' operaotr in guarded matches correctly, this
    would be stupidly hard in regexp based syntax
- Unlike haskell-mode, quasi quotes are understood and do not confuse
  the mode
- Consistant indentation: haskell-mode's indentation works in a
  cyclical way, it cycles through where you might want indentation.
  haskell-ts-mode, meanwhile relies on you to set the parse tree
  changing whitespace.
- Significantly more perfomant than haskell(-tng)-mode, don't have a
  number on this yet.

* Motivation
  
haskell-mode contains nearly 30k lines of code, and is
about 30 years old.  Therefore, a lot of stuff emacs has gained the
ability to do in those years, haskell-mode already has implemented
them.

In 2018, a mode called haskell-tng-mode was made to solve some of
these problems. However because of haskell's syntax, it too became
very complex and required a web of dependencies.

Both these modes ended up practically parsing haskells syntax to
implement indentation, so I thought why not use tree sitter?

However, haskell(-tng)-mode is still a lot more complete than this,
and is recommended if you have any commercial work to do.
  
* Installation

#+BEGIN_SRC: elisp
(add-to-list 'load-path "path/to/haskell-ts-mode")
(require 'haskell-ts-mode)
#+END_SRC

* Customization

if colour is too much or too less for you, adjust
treesit-font-lock-level accordingly.

If that is not enough, you can customize haskell-ts-font-lock-feature-list

* TODO
- support for customization UI
